{"version":3,"sources":["components/Logo/assets/logo.png","components/Logo/Logo.jsx","services/calculator/calculator.ts","components/NumberInput/NumberInput.tsx","components/Calculator/CalculatorResult.tsx","components/Calculator/Calculator.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Logo","src","logo","className","alt","defaultPricePerPersonValues","peopleCount","birthdayPeopleCount","boxesCount","boxPrice","deliveryPrice","coxinhasPerPerson","coxinhasPerBox","pricePerPerson","params","Number","toFixed","calculator","coxinhasData","NumberInput","props","state","currentValue","this","setState","String","defaultValue","value","match","replace","length","handleOnChange","labelText","placeholder","labelId","Math","random","toString","htmlFor","id","aria-label","type","onChange","e","handleInputValue","target","Component","CalculatorResult","coxinhasResult","isFinite","round","Calculator","param","prevState","key","map","coxinhasInfo","index","handleInputUpdate","result","renderNumberInputs","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAAe,G,YAAA,IAA0B,kCCQ1BA,G,MAJF,WACX,OAAO,yBAAKC,IAAKC,EAAMC,UAAU,OAAOC,IAAI,wB,mCCQxCC,EAAoD,CACxDC,YAAa,EACbC,oBAAqB,EACrBC,WAAY,EACZC,SAAU,KACVC,cAAe,GAGXC,EAAoB,SAACL,EAAqBM,EAAwBJ,GAItE,OAHsBI,EAAiBJ,EACAF,GAKnCO,EAAiB,SAACC,GAA0C,IACxDN,EAA0EM,EAA1EN,WAAYC,EAA8DK,EAA9DL,SAAUC,EAAoDI,EAApDJ,cAAeJ,EAAqCQ,EAArCR,YAAaC,EAAwBO,EAAxBP,oBAK1D,OAAOQ,SAHaP,EAAaC,EAAYC,IACnBJ,EAAcC,IAEOS,QAAQ,KAyB1CC,EAtBI,SAACC,GAAiD,IAEjEV,EACEU,EADFV,WAAYC,EACVS,EADUT,SAAUC,EACpBQ,EADoBR,cAAeJ,EACnCY,EADmCZ,YAAaC,EAChDW,EADgDX,oBAAqBK,EACrEM,EADqEN,eAOzE,MAAO,CACLC,eAAgBA,EALiC,CACjDL,aAAYC,WAAUC,gBAAeH,sBAAqBD,gBAK1DK,kBAAmBA,EAAkBL,EAAaM,EAAgBJ,K,uBCUvDW,G,wDA3Cb,WAAYC,GAA2B,IAAD,8BACpC,cAAMA,IAEDC,MAAQ,CACXC,aAAc,KAJoB,E,gEASpCC,KAAKC,SAAS,CAACF,aAAcG,OAAOF,KAAKH,MAAMM,kB,gFAG1BC,G,qEAEjBA,EAAMC,MAAM,qB,gCACRL,KAAKC,SAAS,CAACF,aAAcK,EAAME,QAAQ,MAAO,IAAIA,QAAQ,IAAK,O,gCAC/C,IAAjBF,EAAMG,O,gCACTP,KAAKC,SAAS,CAACF,aAAc,M,OAGrCC,KAAKH,MAAMW,eAAehB,OAAOQ,KAAKF,MAAMC,e,sIAGpC,IAAD,SAC4BC,KAAKH,MAAhCY,EADD,EACCA,UAAWC,EADZ,EACYA,YACbC,EAAe,uBAAmBC,KAAKC,SAASC,SAAS,IAAIR,QAAQ,WAAY,KAEvF,OACE,yBAAK1B,UAAU,0BACb,2BAAOmC,QAASJ,GAAUF,GAC1B,2BACEO,GAAIL,EACJM,aAAW,eACXC,KAAK,OACLd,MAAOJ,KAAKF,MAAMC,aAClBoB,SAAW,SAACC,GAAD,OAAO,EAAKC,iBAAiBD,EAAEE,OAAOlB,QACjDM,YAAaA,S,GArCGa,cCiBXC,EAxBU,SAAC3B,GAAmC,IAAD,EACZA,EAAM4B,eAA5CrC,EADkD,EAClDA,kBAAmBE,EAD+B,EAC/BA,eAY3B,OACE,yBAAKV,UAAU,UACb,uBAAGA,UAAU,uBAAb,wBACuB,8BAZpB8C,SAAStC,GAEPc,OAAOU,KAAKe,MAA0B,IAApBvC,GAA2B,KAFX,OAcvC,uBAAGR,UAAU,oBAAb,qBACoB,8BAVjB8C,SAASpC,GAER,MAAN,OAAaA,EAAeG,QAAQ,GAAGa,QAAQ,IAAK,MAFd,eCmD3BsB,E,kDAjDb,WAAY/B,GAA0B,IAAD,8BACnC,cAAMA,IAEDC,MAAQ,CACXH,aAAa,aAAEN,eHXgB,KGWyBP,IAJvB,E,8DAQnB+C,EAAezB,GAC/BJ,KAAKC,UAAS,SAAA6B,GAGZ,OAFAA,EAAUnC,aAAakC,GAASzB,EAExB0B,O,2CAIU,IAAD,OASXnC,EAAiBK,KAAKF,MAAtBH,aACR,MAT2D,CACzD,CAAEoC,IAAK,cAAetB,UAAW,oBACjC,CAAEsB,IAAK,sBAAuBtB,UAAW,4BACzC,CAAEsB,IAAK,aAActB,UAAW,wBAChC,CAAEsB,IAAK,iBAAkBtB,UAAW,sBACpC,CAAEsB,IAAK,WAAYtB,UAAW,kBAC9B,CAAEsB,IAAK,gBAAiBtB,UAAW,qBAGVuB,KAAI,SAACC,EAAsCC,GACpE,OACE,kBAAC,EAAD,CACEH,IAAKG,EACLzB,UAAWwB,EAAaxB,UACxBN,aAAcR,EAAasC,EAAaF,KACxCvB,eAAgB,SAACJ,GAAoB,EAAK+B,kBAAkBF,EAAaF,IAAK3B,W,+BAOpF,IAAMgC,EAAS1C,EAAWM,KAAKF,MAAMH,cACrC,OACE,yBAAKf,UAAU,wBACXoB,KAAKqC,qBACP,kBAAC,EAAD,CAAkBZ,eAAgBW,S,GA5CjBb,aCEVe,EAbH,SAACzC,GACX,OACE,yBAAKjB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,MACA,wDAGF,kBAAC,EAAD,QCFc2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrC,MACvB,2DCZNsC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.17ff4f7f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.ac3bb671.png\";","import React from 'react';\nimport logo from './assets/logo.png';\nimport './Logo.scss'\n\nconst Logo = () => {\n  return <img src={logo} className=\"logo\" alt=\"rotating-coxinhas\" />\n}\n\nexport default Logo;\n","import ICoxinhasData from './icoxinhasdata.interface'\n\nexport type coxinhasResult = { pricePerPerson: number, coxinhasPerPerson: number }\nexport type pricePerPersonParams = {\n  peopleCount: number,\n  birthdayPeopleCount: number,\n  boxesCount: number,\n  boxPrice: number,\n  deliveryPrice: number\n}\n\nconst defaultCoxinhasCount: number = 100\n\nconst defaultPricePerPersonValues: pricePerPersonParams = {\n  peopleCount: 2,\n  birthdayPeopleCount: 0,\n  boxesCount: 1,\n  boxPrice: 27.5,\n  deliveryPrice: 6\n}\n\nconst coxinhasPerPerson = (peopleCount: number, coxinhasPerBox: number, boxesCount: number): number => {\n  const totalCoxinhas = coxinhasPerBox * boxesCount\n  const totalPerPerson = totalCoxinhas / peopleCount\n\n  return totalPerPerson\n}\n\nconst pricePerPerson = (params: pricePerPersonParams): number => {\n  const { boxesCount, boxPrice, deliveryPrice, peopleCount, birthdayPeopleCount } = params\n\n  const totalPrice = (boxesCount * boxPrice) + deliveryPrice\n  const totalPayingPeople = peopleCount - birthdayPeopleCount\n\n  return Number((totalPrice / totalPayingPeople).toFixed(2))\n}\n\nconst calculator = (coxinhasData: ICoxinhasData): coxinhasResult => {\n  const {\n    boxesCount, boxPrice, deliveryPrice, peopleCount, birthdayPeopleCount, coxinhasPerBox\n  } = coxinhasData\n\n  const pricePerPersonParams: pricePerPersonParams = {\n    boxesCount, boxPrice, deliveryPrice, birthdayPeopleCount, peopleCount\n  }\n\n  return {\n    pricePerPerson: pricePerPerson(pricePerPersonParams),\n    coxinhasPerPerson: coxinhasPerPerson(peopleCount, coxinhasPerBox, boxesCount)\n  }\n}\n\nexport {\n  defaultCoxinhasCount,\n  defaultPricePerPersonValues,\n  coxinhasPerPerson,\n  pricePerPerson\n}\n\nexport default calculator\n","import React, { Component } from 'react';\nimport './NumberInput.scss'\n\ninterface INumberInputProps {\n  labelText: string,\n  placeholder?: string,\n  defaultValue: number,\n  handleOnChange: (value: number) => void\n}\n\ninterface INumberInputState {\n  currentValue: string\n}\n\nclass NumberInput extends Component<INumberInputProps, INumberInputState> {\n  constructor(props: INumberInputProps) {\n    super(props)\n\n    this.state = {\n      currentValue: '0'\n    }\n  }\n\n  componentDidMount() {\n    this.setState({currentValue: String(this.props.defaultValue)})\n  }\n\n  async handleInputValue(value: string) {\n\n    if (value.match(/^\\d+[.,]?(\\d+)?$/g)) {\n      await this.setState({currentValue: value.replace(/^0+/, '').replace(',', '.')})\n    } else if (value.length === 0) {\n      await this.setState({currentValue: '0'})\n    }\n\n    this.props.handleOnChange(Number(this.state.currentValue))\n  }\n\n  render() {\n    const { labelText, placeholder } = this.props\n    const labelId: string = `number-label-${Math.random().toString(36).replace(/[^a-z]+/g, '')}`\n\n    return (\n      <div className='number-input-container'>\n        <label htmlFor={labelId}>{labelText}</label>\n        <input\n          id={labelId}\n          aria-label='number-input'\n          type='text'\n          value={this.state.currentValue}\n          onChange={ (e) => this.handleInputValue(e.target.value)}\n          placeholder={placeholder}\n        />\n      </div>\n    )\n  }\n}\n\nexport default NumberInput;\n","import React from 'react';\nimport { coxinhasResult } from \"../../services/calculator/calculator\"\n\ninterface ICalculatorResultProps {\n  coxinhasResult: coxinhasResult\n}\n\nconst CalculatorResult = (props: ICalculatorResultProps) => {\n  const { coxinhasPerPerson, pricePerPerson } = props.coxinhasResult\n\n  const parsedCoxinhasPerPerson = (): string => {\n    if (!isFinite(coxinhasPerPerson)) return '--'\n\n    return String(Math.round(coxinhasPerPerson * 100) / 100)\n  }\n  const parsedPricePerPerson = (): string => {\n    if (!isFinite(pricePerPerson)) return 'R$ -----'\n\n    return `R$ ${pricePerPerson.toFixed(2).replace('.', ',')}`\n  }\n  return (\n    <div className='result'>\n      <p className='coxinhas-per-person'>\n        Coxinhas por Pessoa: <span>{parsedCoxinhasPerPerson()}</span>\n      </p>\n      <p className='price-per-person'>\n        Valor por Pessoa: <span>{parsedPricePerPerson()}</span>\n      </p>\n    </div>\n  )\n}\nexport default CalculatorResult\n","import React, { Component } from 'react';\nimport ICoxinhasData from '../../services/calculator/icoxinhasdata.interface';\nimport { defaultPricePerPersonValues, defaultCoxinhasCount } from '../../services/calculator/calculator';\nimport NumberInput from '../NumberInput/NumberInput';\nimport calculator from '../../services/calculator/calculator'\nimport CalculatorResult from './CalculatorResult';\n\ninterface ICalculatorProps { }\ninterface ICalculatorState {\n  coxinhasData: ICoxinhasData\n}\n\ntype orderedCoxinhaDataType = {\n  key: string,\n  labelText: string\n}\n\nclass Calculator extends Component<ICalculatorProps, ICalculatorState> {\n  constructor(props: ICalculatorProps) {\n    super(props)\n\n    this.state = {\n      coxinhasData: {coxinhasPerBox: defaultCoxinhasCount, ...defaultPricePerPersonValues}\n    }\n  }\n\n  handleInputUpdate(param: string, value: number) {\n    this.setState(prevState => {\n      prevState.coxinhasData[param] = value\n\n      return  prevState\n    })\n  }\n\n  renderNumberInputs() {\n    const orderedCoxinhasData: Array<orderedCoxinhaDataType> = [\n      { key: 'peopleCount', labelText: 'Total de pessoas' },\n      { key: 'birthdayPeopleCount', labelText: 'Total de aniversariantes' },\n      { key: 'boxesCount', labelText: 'Quantidade de caixas' },\n      { key: 'coxinhasPerBox', labelText: 'Coxinhas por caixa' },\n      { key: 'boxPrice', labelText: 'Valor da caixa' },\n      { key: 'deliveryPrice', labelText: 'Valor da entrega' },\n    ]\n    const { coxinhasData } = this.state\n    return orderedCoxinhasData.map((coxinhasInfo: orderedCoxinhaDataType, index: number) => {\n      return (\n        <NumberInput\n          key={index}\n          labelText={coxinhasInfo.labelText}\n          defaultValue={coxinhasData[coxinhasInfo.key]}\n          handleOnChange={(value: number) => { this.handleInputUpdate(coxinhasInfo.key, value)}}\n        />\n      )\n    })\n  }\n\n  render() {\n    const result = calculator(this.state.coxinhasData)\n    return (\n      <div className='calculator-container'>\n        { this.renderNumberInputs() }\n        <CalculatorResult coxinhasResult={result} />\n      </div>\n    )\n  }\n}\n\nexport default Calculator;\n","import React from 'react'\nimport './App.scss';\nimport Logo from '../Logo/Logo';\nimport Calculator from '../Calculator/Calculator';\n\ninterface IAppProps {}\nconst App = (props: IAppProps) => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Logo />\n        <h1>Calculadora de Coxinhas</h1>\n      </header>\n\n      <Calculator />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}